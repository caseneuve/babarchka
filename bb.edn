{:paths ["."]
 :tasks
 {:requires ([babashka.cli :as cli]
             [clojure.string :refer [upper-case]])
  :init
  (do
    (defn colored [& args]
      (let [color (update-vals {:blue 34 :magenta 35 :reset 0} (fn [s] (str "\033[" s "m")))]
       (apply str (for [a args] (if (keyword? a) (a color) a)))))

    (defn parse-test-args []
      (try
        (cli/parse-opts
         *command-line-args*
         {:alias {:t :test-name :m :mark :n :namespace}
          :coerce {:test-name :string :mark :string :namespace :string}})
        (catch Exception e
          {:error (str (ex-message e) " " *command-line-args*)})))

    (defn parse-docker-args []
      (cli/parse-opts *command-line-args* {:alias {:q :quick} :coerce {:quick :boolean}}))

    (defn -task []
      (colored :blue "[BABARCHKA @" :magenta (-> (current-task) :name upper-case) :blue "]" :reset))

    (defn log [msg] (printf "%s %s\n" (-task) msg) (flush))

    (def docker
      {:base "archlinux"
       :file "./dockerfiles/Dockerfile"
       :image "bbarch"
       :name "scripts"})
    )

  test
  {:doc "Run all tests, or run only matching --mark / --test-name / --namespace"
   :enter (log "Looking for tests...")
   :task (exec 'tests.runner/-main {:exec-args (parse-test-args)})
   :leave (log "Done!")}

  docker:pull
  {:doc "Update local archlinux image"
   :enter (log (format "Updating base image: %s" (:base docker)))
   :task (shell (format "docker pull %s" (:base docker)))}

  docker:build
  {:doc "Build a Docker container from ./dockerfiles/Dockerfile"
   :enter (log (format "Building a Docker image from %s" (:file docker)))
   :task (shell (format "docker build --tag %s --file %s ." (:image docker) (:file docker)))}

  docker:run
  {:doc "Run container `(:name docker)`"
   :enter (log (format "Running Docker container %s" (:name docker)))
   ;; set nofile ulimits to Arch defaults, otherwise fakeroot will hang:
   ;; https://wiki.archlinux.org/title/Limits.conf#nofile
   ;; run `grep NOFILE /etc/systemd/system.conf` to see defaults
   :task (shell (format "docker run --tty --name %s --ulimit nofile=1024:524288 %s"
                        (:name docker) (:image docker)))}

  docker:clean
  {:doc "Remove image and container created from ./dockerfiles/Dockerfile"
   :enter (log (format "Removing Docker image '%s' and container '%s'"
                       (:image docker) (:name docker)))
   :task (do (shell (format "docker rm %s" (:name docker)))
             (shell (format "docker image rm %s" (:image docker))))}

  docker
  {:doc "Execute all docker tasks, with --quick, skip pulling"
   :enter (log "Go!")
   :leave (log "Done!")
   :task (do (when-not (:quick (parse-docker-args))
               (run 'docker:pull))
             (run 'docker:build)
             (run 'docker:run)
             (run 'docker:clean))}}}
